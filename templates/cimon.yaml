# the one and only configuration file for the SBB Cimon scripts
#
# poll jenkis and so on every pollingIntervalSec seconds and display result on output
pollingIntervalSec: 60
# operate on which days of the week, 0=monday and 6=sunday
# input can be period like 0-4 (start and end inclusive) or list like 0,2,3 or a combination like 0-4,6 or * for all days
# 0-4 is Monday to Friday, "*" or 0-6 is all days
operatingDays: 0-4
# similar to weekdays but the hours of the day
# for instance 6-21 is 06:00 to 21:59 and "*" or 0-23 is allways
operatingHours: 6-21
# collectors - fetching the current status to display, for instance build status
# each entry is an implementation module (python file without ".py") and has to be loadable
collector:
  # Collect from jenkins (build results). Usually you will need this one.
  - implementation: jenkinscollector
    # the base jenkins URL
    url: <url-of-my-jenkins>
    # username for jenkins, optional
    #user: <myuser>
    # encrypted password requires the correct AES Key at ~/cimon/key.bin
    #passwordEncrypted: <AES encrypted password, base64 encoded - use configutil --encrypt <mypassword>>
    #password: <plaintext-password, not recomended>
    # url for the saml or jwt login
    #samlLoginUrl: <mysamlloginurl>
    #jwtLoginUrl: <myjwtloginurl>
    # Validate HTTPS certificates - True per default (False only works with python >= 3.4.3)
    # verifySsl: True
    # a list of jobs [job_a,job_b]. For multiple jobs better use a view.
    #jobs: []
    # a list of views [view_a,view_b]. Ideally you have exactly one view here.
    views: []
    # maximum number of parallel requests to the jenkins server. Default is 7.
    # maxParallelRequest: 7
    # the depth parameter in the api query to jenkins when querying views (depth=x). The higher the more data is sent.
    # Default is 0, use 2 if you need timestamp and culprits from views (for instance for apiserveroutput)
    # viewDepth: 0
    # the name to use for the collector internally. Optional, per default it is the hostname.
    # name: <name>
    # some builds do not have a meaningfull name (for instance develop), in this case extract the name from the url via a regex group
    # jobNameFromUrlPattern: <regex_with_groups>
    # jobNameFromUrlPatternMatchGroup: 1

  # collect application status from new relic
  - implementation: newreliccollector
    # the base new relic. Required.
    url: https://api.newrelic.com
    # the api key for new relic in plaintext. This or apiKeyEncrypted is required. Use apiKeyEncyrpted.
    apiKey: <newrelic-api-key>
     # the api key for new relic encrypted with the cimon password. This or apiKey is required
    apiKeyEncyrpted: <newrelic-api-key-encyrpted>
    # type - either alerts (default) or applications
    type: alerts
    # the policy names of alerts to collect. Only for type alerts. Optional, default is all (.*)
    # policyNamePattern: : <regex-for-policy-names-in-newrelic-syncetics>
    # the condition names of alerts to collect. Only for type alerts. Optional, default is all (.*)
    # conditionNamePattern: : <regex-for-condition-names-in-newrelic-syncetics>
    # the applications to collect from newrelic by a regex for the name. Only for type applications. Optional, default is all (.*)
    # applicationNamePattern: <regex-for-application-names-in-newrelic>
    # refresh the list of applications every n requests. Optional, default is 50
    # refreshApplicationsEvery: 50
    # Enable or turn off ssl validation. Optional, default is True (SSL validation on)
    # verifySsl: True
    # the name to use for the collector internally. Optional, per default it is the hostname.
    # name: <name>

# collectors - fetching the current status to display, for instance build status
output:
  # Output to the USB Ampel. Usually no configuration required.
  # remove if you dont use the Cleware USB Ampel.
  # each entry is an implementation module (python file without ".py") and has to be loadable
  - implementation: clewareampeloutput
    # will find the device automatically, but for instance if you have multiple devices you can configure the serial number here.
    # use "clewarecontrol -l" to find your serial number
    # device:
    # the number of errors until error is signaled (all lights on). Default is 3 (the 4th error is displayed)
    # signalErrorThreshold: 3
    # the interval of the flashing in case the build is active in seconds. Default is 1.5 second. Put -1 to turn off flashing.
    # flashIntervalSec: 1.5
    # output all light states every given seconds. Put 0 to enforce absolute output every time. Default is 300 seconds (5 minutes)
    # absoulteEverySec: 300
    # filter by job name (build) and collector to output to this device using a regex. Default is None - same as ".*" (all)
    # buildFilterPattern: ".*"
    # collectorFilterPattern: ".*"
  # Output to the Energenie Socket (Steckdosenleiste). Usually no configuration required.
  # remove if you dont use Energenie.

  - implementation: energenieoutput
    # will find the device automatically, but for instance if you have multiple devices you can configure the number here.
    # use "sispmctl -s" to find your device number
    # deviceNr:
    # the number of errors until error is signaled (all lights on). Default is 3 (the 4th error is displayed)
    # signalErrorThreshold: 3
    # repeat the output every n times even if it is unchanged. Default is every 15 times.
    # repeatEvery: 15
    # change the assignment of sockets (numbers 1 to 4) the colors red, yellow and green. Default is 1: red, 2: yellow, 3: green and 4: red.
    # Sockets can be omitted (will not be switched by this output, for instance 1: green, 2: yellow will only switch 1 and 2 but not 3 and 4)
    # colors:
    #  1: red
    #  2: yellow
    #  3: green
    #  4: red
    # filter by job name (build) and collector to output to this device using a regex. Default is None - same as ".*" (all)
    # buildFilterPattern: ".*"
    # collectorFilterPattern: ".*"

  - implementation: apiserveroutput
    # Proxy Jenkins (and in future other services). Provide a HTTP Rest API server to the remote service (
    # so its remote service -> CIMON -> api server)
    # the host the api server will bind, per default "localhost" (for a local proxy the default is fine)
    # host: localhost
    # the port the api server will run on. Default is 8080, change if that is allready occupied
    # port: 8080
    # certain emulated jenkins views to provide. Per default there is "all" which includes all collected builds
    # views:
      # name: regex pattern (will be applied on the build name)
      #myview: "my\.build\.to\.display\..*"
      #myotherview: "my\.otherbuild\.to\.display\..*"
    # filter by collector to forward to the api server using a regex. Default is None - same as ".*" (all)
    # collectorFilterPattern: ".*"

  - implementation: playbulboutput
    # the device (mandatory) is the (bluetooth) mac address of your bulb
    # use sudo hcitool lescan to find out
    # device:
    #
    # the number of errors until error is signaled (all lights on). Default is 3 (the 4th error is displayed)
    # signalErrorThreshold: 3
    #
    # The color_reg is the register for the color command, default is 0x001b it depends on your hardware revision.
    # May also be 0x0018 or another value.
    # colorReg: 0x001b
    #
    # The flash_reg is the register for the flash/rainbow/pulse command, default is 0x0019 it depends on your hardware revision.
    # May also be 0x0016 or another value.
    # flashReg: 0x0019
    #
    # color codes
    # redColor: 00ff0000
    # greenColor: 0000ff00
    # yellowColor: 00ffff00
    # allColor: 000000ff
    # offColor: 00000000
    # flash code, please have a look at your playbulb manual for valid values, default is pulse with speed 04 04
    # flash: 01000404
    #
    # filter by job name (build) and collector to output to this device using a regex. Default is None - same as ".*" (all)
    # buildFilterPattern: ".*"
    # collectorFilterPattern: ".*"

  - implementation: hueoutput
    #ipaddress: '<ip-address of hue bridge>'
    #lamps: [<list-of-ids for your lamps>]
    #unused: [<list-of-ids of unused lamps (i.e. lamps contained in "lamps" but not mapped below>]
    #mappings:
    #  '<arbitrary group name 1>':
    #    builds: ['<jenkins-job-id1>','<jenkins-job-id2>', ...]
    #    lamps: [<lamp-id1>]
    #  '<arbitrary group name 2>':
    #    builds: ['<jenkins-job-id3>']
    #    lamps: [<lamp-id2>,<lamp-id3>,...]
    # Note that each job can only be assigned to one group. A group can consist of one or more jobs. Each group can have
    # one or more lamps assigned, but each lamp can only be assigned to one job.

# logging configuration, will be passed on to the python loggin dictionary config 1:1.
# will log from INFO to a file in /var/log/cimon/cimon.log and from CRITICAL to stderr
# See https://docs.python.org/2/library/logging.config.html for details
logging:
  version: 1
  formatters:
    simpleFormater:
      format: '%(asctime)s %(levelname)s %(message)s'
      datefmt: '%Y/%m/%d %H:%M:%S'
  handlers:
    console:
      # log criticals to STDERR
      class: logging.StreamHandler
      formatter: simpleFormater
      level: CRITICAL
      stream: ext://sys.stderr
    file:
      # Template proposes a rotating file handler by size to avoid disk overflow
      class: logging.handlers.RotatingFileHandler
      formatter: simpleFormater
      level: DEBUG
      filename: /var/log/cimon/cimon.log
      # rotate at 100 MB, allow 200 MB in total
      maxBytes: 100000000
      backupCount: 1
  root:
      level: DEBUG
      handlers: [console, file]



